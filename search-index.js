var searchIndex={};
searchIndex["maybe_unwind"] = {"doc":"A wrapper of [`catch_unwind`] that also captures the panic…","i":[[3,"Backtrace","maybe_unwind","A captured OS thread stack backtrace.",null,null],[3,"Location","","The information about the location of an unwinding panic.",null,null],[3,"Unwind","","The captured information about an unwinding panic.",null,null],[3,"MaybeUnwind","","A future for the [`maybe_unwind`] method.",null,null],[5,"capture_panic_info","","Capture the panic information.",null,[[["panicinfo",3]]]],[5,"maybe_unwind","","Invokes a closure, capturing the cause of an unwinding…",null,[[],[["result",4],["unwind",3]]]],[11,"payload","","Return the payload associated with the captured panic.",0,[[],["any",8]]],[11,"payload_str","","Return the string representation of the panic payload.",0,[[]]],[11,"into_payload","","Convert itself into a trait object of the panic payload.",0,[[],[["any",8],["box",3]]]],[11,"location","","Return the information about the location from which the…",0,[[],[["option",4],["location",3]]]],[11,"backtrace","","Return the captured backtrace for the panic.",0,[[],[["backtrace",3],["option",4]]]],[11,"file","","Return the name of the source file from which the panic…",1,[[]]],[11,"line","","Return the line number from which the panic originated.",1,[[]]],[11,"column","","Return the column from which the panic originated.",1,[[]]],[8,"FutureMaybeUnwindExt","","An extension trait for `Future`s that provides an adaptor…",null,null],[11,"maybe_unwind","","Catches unwinding panics while polling the future.",2,[[],["maybeunwind",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"try_poll","","",4,[[["context",3],["pin",3]],["poll",4]]],[11,"fmt","","",3,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",3,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"poll","","",4,[[["context",3],["pin",3]],["poll",4]]],[11,"drop","","",4,[[["pin",3]]]],[11,"capture","","Capture a stack backtrace of the current thread.",3,[[],["backtrace",3]]],[11,"force_capture","","Forcibly captures a full backtrace, regardless of…",3,[[],["backtrace",3]]],[11,"status","","Returns the status of this backtrace, indicating whether…",3,[[],["backtracestatus",4]]],[11,"maybe_unwind","","Catches unwinding panics while polling the future.",2,[[],["maybeunwind",3]]]],"p":[[3,"Unwind"],[3,"Location"],[8,"FutureMaybeUnwindExt"],[3,"Backtrace"],[3,"MaybeUnwind"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);